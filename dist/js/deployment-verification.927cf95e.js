class DeploymentVerification{constructor(){this.tests=[],this.results={passed:0,failed:0,total:0}}addTest(e,t){this.tests.push({name:e,testFn:t})}async runTests(){console.log("开始部署验证测试..."),this.results.total=this.tests.length;for(const e of this.tests)try{console.log(`运行测试: ${e.name}`),!0===await e.testFn()?(console.log(`✅ 测试通过: ${e.name}`),this.results.passed++):(console.error(`❌ 测试失败: ${e.name}`),this.results.failed++)}catch(t){console.error(`❌ 测试出错: ${e.name}`,t),this.results.failed++}return console.log("测试完成:",this.results),this.results}displayResults(){const e=document.createElement("div");e.className="verification-results",e.style.cssText="\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            background: #fff;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            padding: 15px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            z-index: 9999;\n            font-family: Arial, sans-serif;\n            max-width: 300px;\n        ",e.innerHTML=`\n            <h3 style="margin-top: 0; color: #333;">部署验证结果</h3>\n            <div style="margin-bottom: 10px;">\n                <div>总测试数: ${this.results.total}</div>\n                <div style="color: green;">通过: ${this.results.passed}</div>\n                <div style="color: red;">失败: ${this.results.failed}</div>\n            </div>\n            <div style="text-align: right;">\n                <button id="close-verification" style="\n                    background: #4CAF50;\n                    color: white;\n                    border: none;\n                    padding: 5px 10px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                ">关闭</button>\n            </div>\n        `,document.body.appendChild(e),document.getElementById("close-verification").addEventListener("click",()=>{e.remove()})}}function createDeploymentTests(){const e=new DeploymentVerification;return e.addTest("基本DOM元素检查",()=>{const e=["app","water-card","posture-card","settings-panel","notification-overlay","help-overlay"];for(const t of e)if(!document.getElementById(t))return console.error(`缺少必要DOM元素: ${t}`),!1;return!0}),e.addTest("JavaScript组件加载检查",()=>{if(!window.app||!window.app.isInitialized)return console.error("应用未正确初始化"),!1;const e=["storageManager","appSettings","notificationService","activityDetector","waterReminder","postureReminder","uiController"];for(const t of e)if(!window.app[t])return console.error(`缺少核心组件: ${t}`),!1;return!0}),e.addTest("本地存储功能检查",()=>{try{const e="_test_deployment_"+Date.now();localStorage.setItem(e,"test");const t=localStorage.getItem(e);return localStorage.removeItem(e),"test"===t}catch(e){return console.error("本地存储测试失败:",e),!1}}),e.addTest("CSS样式加载检查",()=>{const e=document.getElementById("app");if(!e)return!1;const t=window.getComputedStyle(e);return t&&"none"!==t.display}),e.addTest("资源文件访问检查",async()=>{try{const e=["assets/water-icon.png","assets/posture-icon.png","assets/notification.mp3"];for(const t of e)if(!(await fetch(t,{method:"HEAD"})).ok)return console.error(`资源文件不可访问: ${t}`),!1;return!0}catch(e){return console.error("资源文件检查失败:",e),!1}}),e.addTest("Service Worker检查",async()=>{if(!("serviceWorker"in navigator))return console.warn("浏览器不支持Service Worker"),!0;try{return!!await navigator.serviceWorker.getRegistration()}catch(e){return console.error("Service Worker检查失败:",e),!1}}),e}window.location.search.includes("verify=true")&&window.addEventListener("load",async()=>{let e=0;const t=async()=>{if(window.app&&window.app.isInitialized){console.log("应用已初始化，开始验证");const e=createDeploymentTests();await e.runTests(),e.displayResults()}else if(e<10)e++,console.log(`等待应用初始化... (${e}/10)`),setTimeout(t,500);else{console.error("应用初始化超时，无法完成验证");const e=new DeploymentVerification;e.results.total=1,e.results.failed=1,e.displayResults()}};t()});